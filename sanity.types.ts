/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Quote = {
  _type: "quote";
  content?: string;
  author?: {
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    name?: string;
    position?: string;
  };
};

export type Picture = {
  _type: "picture";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  caption?: string;
};

export type Content = {
  _type: "content";
  heading?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type BuilderNews = Array<{
  _key: string;
} & Content | {
  _key: string;
} & Picture | {
  _key: string;
} & Quote>;

export type TypeResident = {
  _type: "typeResident";
  naming?: string;
  type?: string;
  status?: "completed" | "in_progress" | "free_lots";
  completion_time?: string;
  area?: string;
  info?: Array<{
    param?: string;
    value?: string;
    _key: string;
  }>;
  description?: string;
  award?: string;
};

export type TypeParams = Array<{
  param?: string;
  value?: string;
  _key: string;
}>;

export type TypeBlock = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type News = {
  _id: string;
  _type: "news";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  tag?: string;
  date?: string;
  source?: string;
  slug?: Slug;
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  content?: BuilderNews;
};

export type Direction = {
  _id: string;
  _type: "direction";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: number;
  heading?: string;
  params?: Array<string>;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  naming?: string;
  slug?: Slug;
  id?: number;
  description?: string;
  information?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    text?: TypeBlock;
    _key: string;
  }>;
  residents?: Array<{
    _key: string;
  } & TypeResident>;
  area?: {
    project?: string;
    zone?: string;
  };
  location?: {
    address?: string;
    link?: string;
    coordinates?: string;
    availability?: TypeParams;
  };
  specifications?: TypeParams;
  awards?: Array<string>;
  image?: {
    desktop?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    mobile?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    alt?: string;
  };
  gallery?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    caption?: string;
    _key: string;
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Quote | Picture | Content | BuilderNews | TypeResident | TypeParams | TypeBlock | News | Direction | Project | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/requests.ts
// Variable: PROJECTS_QUERY
// Query: *[_type == "project"] | order(id asc) {        naming, slug, id, description, information, residents, area, location, specifications, awards, image, gallery    }
export type PROJECTS_QUERYResult = Array<{
  naming: string | null;
  slug: Slug | null;
  id: number | null;
  description: string | null;
  information: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    text?: TypeBlock;
    _key: string;
  }> | null;
  residents: Array<{
    _key: string;
  } & TypeResident> | null;
  area: {
    project?: string;
    zone?: string;
  } | null;
  location: {
    address?: string;
    link?: string;
    coordinates?: string;
    availability?: TypeParams;
  } | null;
  specifications: TypeParams | null;
  awards: Array<string> | null;
  image: {
    desktop?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    mobile?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    alt?: string;
  } | null;
  gallery: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    caption?: string;
    _key: string;
  }> | null;
}>;
// Variable: PROJECTS_ITEM_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{        naming, slug, description, information, residents, area, location, specifications, awards, image, gallery    }
export type PROJECTS_ITEM_QUERYResult = {
  naming: string | null;
  slug: Slug | null;
  description: string | null;
  information: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    text?: TypeBlock;
    _key: string;
  }> | null;
  residents: Array<{
    _key: string;
  } & TypeResident> | null;
  area: {
    project?: string;
    zone?: string;
  } | null;
  location: {
    address?: string;
    link?: string;
    coordinates?: string;
    availability?: TypeParams;
  } | null;
  specifications: TypeParams | null;
  awards: Array<string> | null;
  image: {
    desktop?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    mobile?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    alt?: string;
  } | null;
  gallery: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    caption?: string;
    _key: string;
  }> | null;
} | null;
// Variable: DIRECTIONS_QUERY
// Query: *[_type == "direction"]{        id, heading, params    }
export type DIRECTIONS_QUERYResult = Array<{
  id: number | null;
  heading: string | null;
  params: Array<string> | null;
}>;
// Variable: NEWS_QUERY
// Query: *[_type == "news"]{        heading, tag, date, source, slug, cover, content    }
export type NEWS_QUERYResult = Array<{
  heading: string | null;
  tag: string | null;
  date: string | null;
  source: string | null;
  slug: Slug | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  content: BuilderNews | null;
}>;
// Variable: NEWS_ITEM_QUERY
// Query: *[_type == "news" && slug.current == $slug][0]{        heading, tag, date, source, slug, cover, content    }
export type NEWS_ITEM_QUERYResult = {
  heading: string | null;
  tag: string | null;
  date: string | null;
  source: string | null;
  slug: Slug | null;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  content: BuilderNews | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"project\"] | order(id asc) {\n        naming, slug, id, description, information, residents, area, location, specifications, awards, image, gallery\n    }": PROJECTS_QUERYResult;
    "\n    *[_type == \"project\" && slug.current == $slug][0]{\n        naming, slug, description, information, residents, area, location, specifications, awards, image, gallery\n    }": PROJECTS_ITEM_QUERYResult;
    "\n    *[_type == \"direction\"]{\n        id, heading, params\n    }": DIRECTIONS_QUERYResult;
    "\n    *[_type == \"news\"]{\n        heading, tag, date, source, slug, cover, content\n    }": NEWS_QUERYResult;
    "\n    *[_type == \"news\" && slug.current == $slug][0]{\n        heading, tag, date, source, slug, cover, content\n    }": NEWS_ITEM_QUERYResult;
  }
}
